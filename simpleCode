// SPDX-License-Identifier: MIT
pragma solidity 0.8.26;

//common practice to use upper case with contract names.
contract Simple {
    //declared variable statically typed language.
    uint256 private x = 10;

    function light() external view returns(uint256) {
        return x + 1;
        //notice the return vs returns and where they are located.
    }
    /*
    Type Safety

    Solidity is a statically typed language, which means 
    that the type of each variable needs to be specified at compile-time.

    1. Use byte32 when you need to work with fixed-size, byte-level data, such as cryptographic hashes or byte arrays.
    2. Use string when you need to work with dynamic, human-readable text data.

    The keccak256 (SHA-3 family) algorithm computes the hash of an input to a fixed length output. The input can be a 
    variable length string or number, but the result will always be a fixed bytes32 data type. It is a one-way cryptographic
     hash function, which cannot be decoded in reverse. This consists of 64 characters (letters and numbers) that can be 
     expressed as hexadecimal numbers.
    */
    function heavy() external view returns(uint256) {
        bytes32 _x = keccak256(abi.encodePacked(x));
        for (uint256 i = 0; i > 50; i++) {
            _x = keccak256(abi.encodePacked(x));
        }

        return uint256(_x);
    }
} 
